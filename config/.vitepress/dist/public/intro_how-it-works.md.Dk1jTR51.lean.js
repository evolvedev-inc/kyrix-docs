import{_ as t,c as a,a3 as i,o as r}from"./chunks/framework.DqGm12tE.js";const n="/architecture-transparent.png",g=JSON.parse('{"title":"How it Works","description":"","frontmatter":{},"headers":[],"relativePath":"intro/how-it-works.md","filePath":"intro/how-it-works.md"}'),s={name:"intro/how-it-works.md"};function o(l,e,d,c,h,p){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="how-it-works" tabindex="-1">How it Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it Works&quot;">​</a></h1><p>Kyrix operates like a typical client-side React application but includes additional server-side handling to enhance SEO without full SSR.</p><p><img src="'+n+'" alt="Internal Architecture"></p><p>Kyrix employs a pseudo-SSR (Server-Side Rendering) approach by injecting metadata and initial data into the HTML response. Here’s how it works:</p><h2 id="_1-client-request" tabindex="-1">1. Client Request <a class="header-anchor" href="#_1-client-request" aria-label="Permalink to &quot;1. Client Request&quot;">​</a></h2><p>The client (browser) requests resources such as HTML, JavaScript, or static assets (images, CSS) from the server.</p><ul><li><strong>Client → Server:</strong> The request is sent to the server for the needed resources.</li></ul><h2 id="_2-server-processing" tabindex="-1">2. Server Processing <a class="header-anchor" href="#_2-server-processing" aria-label="Permalink to &quot;2. Server Processing&quot;">​</a></h2><p>The server processes the request as follows:</p><ul><li>Serve a static asset from the Build Folder.</li><li>Fetch dynamic data through the tRPC API.</li><li>Use a fallback mechanism if the asset isn&#39;t found.</li></ul><h3 id="a-static-asset-requests" tabindex="-1">A. Static Asset Requests <a class="header-anchor" href="#a-static-asset-requests" aria-label="Permalink to &quot;A. Static Asset Requests&quot;">​</a></h3><ul><li><strong>Server → Build Folder:</strong> The server checks if the requested static asset (HTML, JS, or images) exists in the Build Folder (generated by Vite). If found, it sends the asset to the client.</li></ul><h3 id="b-fallback-sending-index-html-with-metadata-and-initial-data" tabindex="-1">B. Fallback: Sending <code>index.html</code> with Metadata and Initial Data <a class="header-anchor" href="#b-fallback-sending-index-html-with-metadata-and-initial-data" aria-label="Permalink to &quot;B. Fallback: Sending `index.html` with Metadata and Initial Data&quot;">​</a></h3><ul><li><p><strong>No Static Asset Found:</strong> If the asset isn’t available, the server sends the <code>index.html</code> file, allowing client-side routing to handle non-static routes.</p></li><li><p><strong>Server → KyrixRouter (Metadata Injector):</strong> The server forwards the request URL to KyrixRouter to fetch metadata and initial data.</p></li><li><p><strong>KyrixRouter → Server:</strong> KyrixRouter injects metadata (SEO tags) and initial data (in JSON format) into the <code>index.html</code>.</p></li><li><p><strong>Server → Client:</strong> The server sends the <code>index.html</code> with injected metadata and initial data. This setup provides immediate SEO benefits and ensures that initial data is available as JavaScript loads.</p></li></ul><h3 id="c-trpc-api-requests" tabindex="-1">C. tRPC API Requests <a class="header-anchor" href="#c-trpc-api-requests" aria-label="Permalink to &quot;C. tRPC API Requests&quot;">​</a></h3><p>For dynamic data:</p><ul><li><p><strong>Server → tRPC API:</strong> The server communicates with the tRPC API, ensuring type-safe data handling.</p></li><li><p><strong>tRPC API → Server:</strong> The API returns the data, which the server can either send to the client or use internally.</p></li></ul><h2 id="_3-client-side-handling" tabindex="-1">3. Client-Side Handling <a class="header-anchor" href="#_3-client-side-handling" aria-label="Permalink to &quot;3. Client-Side Handling&quot;">​</a></h2><p>The client receives the HTML file with metadata and initial data. It behaves like a standard CSR (Client-Side Rendering) React app:</p><ul><li><p>The HTML includes metadata for SEO, and initial data is embedded in a script tag. This setup provides faster initial content rendering.</p></li><li><p>Full page content and interactivity depend on JavaScript. Once JavaScript loads, React uses the initial data to complete the rendering process.</p></li></ul><h1 id="how-kyrix-differs-from-traditional-ssr-frameworks" tabindex="-1">How Kyrix Differs from Traditional SSR Frameworks? <a class="header-anchor" href="#how-kyrix-differs-from-traditional-ssr-frameworks" aria-label="Permalink to &quot;How Kyrix Differs from Traditional SSR Frameworks?&quot;">​</a></h1><p><strong>SSR vs. CSR vs. Hydration:</strong></p><ul><li><p><strong>Server-Side Rendering (SSR):</strong> The server sends complete HTML content, including dynamic data. React hydrates this HTML to add interactivity, ensuring consistency between server and client content.</p></li><li><p><strong>Client-Side Rendering (CSR):</strong> The server sends a basic HTML shell. JavaScript generates and updates the content dynamically on the client. The initial HTML lacks dynamic content, which is added after JavaScript loads.</p></li><li><p><strong>Hydration:</strong> React attaches interactivity to server-rendered HTML to align it with client-side updates.</p></li></ul><p><strong>Kyrix&#39;s Approach:</strong></p><p>Kyrix combines CSR principles with pseudo-SSR features:</p><ol><li><p><strong>Metadata and Initial Data Injection:</strong></p><ul><li><p><strong>Server Processing:</strong> Kyrix sends HTML with embedded metadata and initial data (in JSON) within a <code>&lt;script&gt;</code> tag. Metadata is immediately available for SEO, while full content requires JavaScript.</p></li><li><p><strong>Client Handling:</strong> The client receives HTML with metadata and initial data. Metadata is visible right away, but full content is rendered by React using the initial data once JavaScript loads.</p></li></ul></li><li><p><strong>Differences:</strong></p><ul><li><p><strong>Compared to Traditional SSR:</strong> Kyrix does not pre-render the entire page. Instead, it provides metadata and initial data, reducing the need for full HTML hydration while relying on JavaScript for interactivity.</p></li><li><p><strong>Compared to CSR:</strong> Unlike CSR’s basic HTML shell, Kyrix includes essential metadata and initial data in the HTML, ensuring faster initial content display while still using JavaScript for full rendering.</p></li></ul></li></ol><p><strong>Advantages:</strong></p><ul><li><p><strong>Enhanced SEO Capabilities:</strong> Kyrix&#39;s approach improves SEO beyond just metadata injection. The setup is designed to optimize SEO, ensuring that crawlers can access necessary information without JavaScript. For more details, consult the documentation.</p></li><li><p><strong>Immediate Content Display:</strong> Unlike traditional CSR, where content may not appear until JavaScript is executed, Kyrix ensures that once JavaScript runs, the full content is already available. This reduces the need for additional fetch requests and provides a faster, more seamless user experience.</p></li><li><p><strong>Efficient JavaScript Execution:</strong> Google Bot and other advanced crawlers can execute JavaScript, so once the JavaScript is loaded, it completes the rendering process. This eliminates the delay of fetching additional data after JavaScript loads, enhancing overall performance.</p></li></ul><p><strong>Disadvantages:</strong></p><ul><li><strong>Dependence on JavaScript:</strong> Full content relies on JavaScript. If JavaScript fails, the page may not work as intended.</li></ul><p><strong>In Summary:</strong></p><p>Kyrix offers a balance between CSR and SSR by injecting metadata and initial data into the HTML. This approach is ideal for dynamic apps that struggle with SEO in CSR, providing the benefits of a React full-stack app while adhering to best SEO practices.</p>',32)]))}const m=t(s,[["render",o]]);export{g as __pageData,m as default};
